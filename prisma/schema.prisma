// This is your Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(MEMBER)
  avatar    String?
  phone     String?
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  assignedTasks Task[]     @relation("AssignedUser")
  createdTasks  Task[]     @relation("CreatedBy")
  budgets       Budget[]   @relation("BudgetCreatedBy")
  notes         Note[]
  activities    Activity[]
  Account       Account[]
  Session       Session[]

  @@index([email])
}

enum Role {
  ADMIN
  MANAGER
  AGENT
  FINANCIAL
  SOCIAL_MEDIA
  MEMBER
}

model Client {
  id        String       @id @default(uuid())
  name      String
  email     String?
  phone     String
  cpfCnpj   String?      @unique
  type      ClientType   @default(INDIVIDUAL)
  category  String?
  source    String?
  city      String?
  state     String?
  status    ClientStatus @default(LEAD)
  notes     String?
  tags      String[]
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  budgets      Budget[]
  shows        Show[]
  contracts    Contract[]
  activities   Activity[]
  customFields Json?

  @@index([status, city, state])
  @@index([createdAt])
}

enum ClientType {
  INDIVIDUAL
  COMPANY
  GOVERNMENT
}

enum ClientStatus {
  LEAD
  CONTACT
  PROPOSAL
  NEGOTIATION
  ACTIVE
  INACTIVE
}

model Budget {
  id          String       @id @default(uuid())
  clientId    String
  client      Client       @relation(fields: [clientId], references: [id])
  number      String       @unique
  title       String
  eventDate   DateTime?
  eventType   String
  location    String?
  duration    String?
  amount      Decimal      @db.Decimal(10, 2)
  description String?
  status      BudgetStatus @default(DRAFT)
  validUntil  DateTime?
  items       BudgetItem[]
  createdById String
  createdBy   User         @relation("BudgetCreatedBy", fields: [createdById], references: [id])
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  showId String? @unique
  show   Show?   @relation("BudgetToShow")

  @@index([clientId, status])
  @@index([eventDate])
}

enum BudgetStatus {
  DRAFT
  SENT
  APPROVED
  REJECTED
  EXPIRED
}

model BudgetItem {
  id          String  @id @default(uuid())
  budgetId    String
  budget      Budget  @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  description String
  quantity    Int     @default(1)
  unitPrice   Decimal @db.Decimal(10, 2)
  total       Decimal @db.Decimal(10, 2)
  order       Int

  @@index([budgetId])
}

model Show {
  id             String      @id @default(uuid())
  clientId       String
  client         Client      @relation(fields: [clientId], references: [id])
  budgetId       String?     @unique
  budget         Budget?     @relation("BudgetToShow", fields: [budgetId], references: [id])
  title          String
  eventDate      DateTime
  eventType      String
  location       String
  city           String?
  state          String?
  venue          String?
  amount         Decimal     @db.Decimal(10, 2)
  status         ShowStatus  @default(CONFIRMED)
  soundSystem    Boolean     @default(false)
  accommodation  Boolean     @default(false)
  transportation Boolean     @default(false)
  notes          String?
  contractId     String?     @unique
  contract       Contract?   @relation("ShowContract")
  production     Production?
  finance        Finance?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([eventDate, status])
  @@index([clientId])
}

enum ShowStatus {
  CONFIRMED
  PENDING
  COMPLETED
  CANCELLED
}

model Production {
  id               String           @id @default(uuid())
  showId           String           @unique
  show             Show             @relation(fields: [showId], references: [id])
  checklistItems   ProductionItem[]
  rider            String?
  backline         String?
  soundCheck       DateTime?
  arrivalTime      DateTime?
  startTime        DateTime?
  endTime          DateTime?
  responsibleName  String?
  responsiblePhone String?
  notes            String?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
}

model ProductionItem {
  id           String     @id @default(uuid())
  productionId String
  production   Production @relation(fields: [productionId], references: [id], onDelete: Cascade)
  title        String
  completed    Boolean    @default(false)
  dueDate      DateTime?
  order        Int

  @@index([productionId])
}

model Finance {
  id            String        @id @default(uuid())
  showId        String?       @unique
  show          Show?         @relation(fields: [showId], references: [id])
  type          FinanceType
  category      String
  description   String
  amount        Decimal       @db.Decimal(10, 2)
  dueDate       DateTime?
  paymentDate   DateTime?
  status        FinanceStatus @default(PENDING)
  paymentMethod String?
  reference     String?
  attachments   String[]
  tags          String[]
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@index([type, status, dueDate])
  @@index([category])
}

enum FinanceType {
  INCOME
  EXPENSE
}

enum FinanceStatus {
  PENDING
  PAID
  OVERDUE
  CANCELLED
}

model Contract {
  id        String         @id @default(uuid())
  clientId  String
  client    Client         @relation(fields: [clientId], references: [id])
  showId    String?        @unique
  show      Show?          @relation("ShowContract", fields: [showId], references: [id])
  title     String
  number    String         @unique
  status    ContractStatus @default(DRAFT)
  startDate DateTime
  endDate   DateTime?
  value     Decimal        @db.Decimal(10, 2)
  filePath  String?
  notes     String?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([clientId, status, startDate])
}

enum ContractStatus {
  DRAFT
  SENT
  SIGNED
  ACTIVE
  EXPIRED
  CANCELLED
}

model Content {
  id        String        @id @default(uuid())
  title     String
  type      ContentType
  platform  String[]
  dueDate   DateTime?
  status    ContentStatus @default(DRAFT)
  mediaUrl  String?
  caption   String?
  hashtags  String[]
  notes     String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([type, platform, status, dueDate])
}

enum ContentType {
  POST
  VIDEO
  STORY
  REEL
  LIVE
}

enum ContentStatus {
  DRAFT
  SCHEDULED
  PUBLISHED
  ARCHIVED
  CANCELLED
}

model Task {
  id           String       @id @default(uuid())
  title        String
  description  String?
  status       TaskStatus   @default(TODO)
  priority     TaskPriority @default(MEDIUM)
  dueDate      DateTime?
  assignedToId String?
  assignedTo   User?        @relation("AssignedUser", fields: [assignedToId], references: [id])
  createdById  String
  createdBy    User         @relation("CreatedBy", fields: [createdById], references: [id])
  tags         String[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([status, priority, dueDate])
  @@index([assignedToId])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

model Note {
  id         String   @id @default(uuid())
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  title      String
  content    String
  entityType String?
  entityId   String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Activity {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  type        String
  title       String
  description String?
  entityType  String?
  entityId    String?
  clientId    String?
  client      Client?  @relation(fields: [clientId], references: [id])
  createdAt   DateTime @default(now())
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id
  token      String   @unique
  expires    DateTime
}
